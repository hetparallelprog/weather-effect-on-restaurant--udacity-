Create or replace warehouse DWH ;
// ------------------------------------------------------------------
create or replace table ODS.DWH.Dim_USER
(
	user_id  varchar(22) primary key ,
	name varchar (50) ,
	review_count INT ,
	yelping_since DATE ,
	useful INT ,
	funny INT ,
	cool INT , 
	elite varchar , 
	friends varchar ,
	fans INT ,
	average_stars float ,
	compliment_more INT ,
	compliment_hot INT ,
	compliment_profile INT ,
	compliment_cute INT ,
	compliment_list  INT ,
	compliment_note  INT ,
	compliment_plain  INT ,
	compliment_cool  INT ,
	compliment_funny  INT ,
	compliment_writer  INT ,
	compliment_photos  INT 
);

insert into ODS.DWH.DIM_USER( user_id,name,review_count,yelping_since,useful,funny,cool,elite,friends ,fans ,average_stars,compliment_hot,
	compliment_more,compliment_profile,compliment_cute ,compliment_list ,compliment_note ,compliment_plain ,compliment_cool ,compliment_funny  ,compliment_writer ,
	compliment_photos  )
select distinct user_id,name,review_count,yelping_since,useful,funny,cool,elite,friends ,fans ,average_stars,compliment_hot,
compliment_more,compliment_profile,compliment_cute ,compliment_list ,compliment_note ,compliment_plain ,compliment_cool ,compliment_funny  ,compliment_writer ,
	compliment_photos
	from ODS.PUBLIC.ACADEMIC_USER;

// ----------------------------------------------------------------------------------------------------   
// ------------------------------------------------------------------------------------------------------------------------------------------

create or replace TABLE ODS.DWH.DIM_BUSINESS 
(
business_id varchar(50) primary key,
name varchar (100),
address varchar(150),
city   varchar(100),
state varchar(10),
postal_code  varchar(10),
latitude  float,
longitude float ,
stars float,
review_count INT ,
is_open boolean,
attributes  varchar,
categories varchar,
hours  varchar
);

insert into ODS.DWH.DIM_BUSINESS( business_id , name ,address ,city ,state ,postal_code ,latitude ,longitude ,stars ,review_count ,
is_open ,attributes ,categories ,hours  )
select business_id  ,name   ,address ,city  ,state ,postal_code,latitude ,longitude,stars ,review_count 
  ,iff(upper(is_open)= 'TRUE' or upper(is_open)= 'FALSE',is_open,Null)as is_open
   ,attributes ,categories ,hours
  from ODS.PUBLIC.ACADEMIC_BUSINESS ;
  
//------------------------------------------------------------------------------
//YELP_ACADEMIC_DATASET_TIP

create table ODS.PUBLIC.DIM_TIP
(
	user_id  varchar(22) primary key ,
	business_id   varchar(22) ,
	compliment_count INT , 
	mytext    varchar ,
	mydate   DATE 
);

insert into ODS.DWH.DIM_TIP(user_id  ,business_id ,compliment_count  , mytext , mydate )
select distinct
user_id  ,
business_id  ,
compliment_count ,
mytext,
mydate
from ODS.Public.ACADEMIC_TIP;    

// -----------------------------------------------------------------------
// YELP_ACADEMIC_DATASET_REVIEW



create or replace TABLE ODS.DWH.FACT_REVIEW
(
review_id  varchar(22)  primary key   ,
user_id  varchar(22) ,
business_id   varchar(22) ,
stars   INT ,
useful   INT ,
funny  INT ,
cool   INT ,
mydate   DATE 
) ;



insert into ODS.dwh.FACT_REVIEW( review_id ,user_id  ,business_id , stars ,useful,funny , cool ,  mydate )
select distinct  
review_id ,
user_id  ,
business_id  ,
stars ,
useful,
funny , 
cool , 
mydate
from ODS.Public.ACADEMIC_REVIEW;


//==========================================================================================================================================
// yelp_academic_dataset_checkin
create or replace TABLE ODS.dwh.DIM_checkin 
(
business_id varchar(22) primary key,
mydate varchar
);

insert into ODS.dwh.DIM_checkin( business_id , mydate)
select distinct business_id  ,mydate
  from ODS.Public.academic_checkin;

// ---------------------------------------------------------------------
create or replace TABLE ODS.DWH.DIM_COVID_FEATURES (

  business_id varchar primary key,
  highlights  varchar,
  delivery_or_takeout boolean  ,
  Grubhub_enabled boolean,
  Call_To_Action_enabled    boolean ,
  Request_Quote_Enabled boolean,
  Covid_Banner boolean ,
  Temporary_Closed_Until boolean ,
  Virtual_Services_Offered boolean

);
insert into ODS.dwh.DIM_COVID_FEATURES(  business_id,highlights ,delivery_or_takeout, Grubhub_enabled ,  Call_To_Action_enabled,  Request_Quote_Enabled ,
  Covid_Banner ,  Temporary_Closed_Until ,  Virtual_Services_Offered )
select distinct business_id  
  ,iff(upper(highlights) = 'TRUE' or upper(highlights) = 'FALSE', DELIVERY_OR_TAKEOUT , null) as highlights
  ,iff(upper(DELIVERY_OR_TAKEOUT) = 'TRUE' or upper(DELIVERY_OR_TAKEOUT) = 'FALSE', DELIVERY_OR_TAKEOUT , null) as delivery_or_takeout 
  ,iff(upper(GRUBHUB_ENABLED)= 'TRUE' or upper(GRUBHUB_ENABLED)= 'FALSE',GRUBHUB_ENABLED,Null) as Grubhub_enabled
  ,iff(upper(CALL_TO_ACTION_ENABLED)= 'TRUE' or upper(CALL_TO_ACTION_ENABLED)= 'FALSE',CALL_TO_ACTION_ENABLED,Null) as Call_To_Action_enabled
  ,iff(upper(REQUEST_QUOTE_ENABLED)= 'TRUE' or upper(REQUEST_QUOTE_ENABLED)= 'FALSE',REQUEST_QUOTE_ENABLED,Null)as Request_Quote_Enabled
  ,iff(upper(COVID_BANNER)= 'TRUE' or upper(COVID_BANNER)= 'FALSE',COVID_BANNER,Null)as Covid_Banner
  ,iff(upper(TEMPORARY_CLOSED_UNTIL)= 'TRUE' or upper(TEMPORARY_CLOSED_UNTIL)= 'FALSE',TEMPORARY_CLOSED_UNTIL,Null) as Temporary_Closed_Until
  , iff(upper(VIRTUAL_SERVICES_OFFERED)= 'TRUE' or upper(VIRTUAL_SERVICES_OFFERED)= 'FALSE',VIRTUAL_SERVICES_OFFERED,Null) as Virtual_Services_Offered
  from ODS.PUBLIC.COVID_FEATURES;

//---------------------------------------------------------------------

  create or replace TABLE ODS.dwh.DIM_TEMPERATURE_PRECIPITATION (
	MDATE DATE primary key,
	MIN FLOAT,
	MAX FLOAT,
	NORMAL_MIN FLOAT,
	NORMAL_MAX  FLOAT,
	PRECIPITATION FLOAT,
	PRECIPITATION_NORMAL FLOAT	
);



insert into ODS.DWH.DIM_TEMPERATURE_PRECIPITATION(  MDATE ,MIN ,	MAX ,	NORMAL_MIN ,	NORMAL_MAX ,PRECIPITATION ,
	PRECIPITATION_NORMAL  )
select distinct MDATE , MIN , 	MAX ,	NORMAL_MIN ,	NORMAL_MAX ,PRECIPITATION ,PRECIPITATION_NORMAL 
from ODS.Public.TEMPERATURE_DEGREEF as a 
join  ODS.Public.PRECIPITATION_INCH as b on  b.TDATE = a.MDATE;
// -----------------------------------------------------------------------------------



// After creating tables then transfering data , now we have to add all the constrint 

ALTER TABLE FACT_REVIEW ADD FOREIGN KEY (user_id) REFERENCES Dim_USER(user_id);  
ALTER TABLE FACT_REVIEW ADD FOREIGN KEY (business_id) REFERENCES FACT_BUSINESS(business_id);  
ALTER TABLE FACT_REVIEW ADD FOREIGN KEY (mydate) REFERENCES DIM_TEMPERATURE_PRECIPITATION(MDATE);  
ALTER TABLE FACT_REVIEW ADD FOREIGN KEY (business_id) REFERENCES DIM_TEMPERATURE_PRECIPITATION(business_id);  





